{
	"info": {
		"_postman_id": "53d28556-f975-4597-8855-ddf70c83f827",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// \r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"//3. Спарсить response body в json\r",
							"var resp_data = pm.response.json();\r",
							"\r",
							"\r",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(resp_data.name).to.eql(\"Maryna\");\r",
							"});\r",
							"\r",
							"\r",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(resp_data.age).to.eql(\"30\");\r",
							"});\r",
							"\r",
							"\r",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"check salary\", function () {\r",
							"    pm.expect(resp_data.salary).to.eql(500)\r",
							"});\r",
							"\r",
							"\r",
							"//7. Спарсить request.\r",
							"var req_data = request.data;\r",
							"\r",
							"\r",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name_Resp is Name_Req\", function () {\r",
							"    pm.expect(resp_data.name).to.eql(req_data.name);\r",
							"});\r",
							"\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age_Resp is Age_Req\", function () {\r",
							"    pm.expect(resp_data.age).to.eql(req_data.age);\r",
							"});\r",
							"\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary_resp is Salary_req\", function () {\r",
							"    pm.expect(resp_data.salary).to.eq(+(req_data.salary));\r",
							"});\r",
							"\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log( \"family :\", resp_data.family)\r",
							"\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Salary_1.5 is Salary*4\", function () {\r",
							"    pm.expect(resp_data.family.u_salary_1_5_year).to.eql(req_data.salary*4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Maryna",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"//3. Спарсить response body в json\r",
							"var resp_data = pm.response.json();\r",
							"\r",
							"\r",
							"//4. Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name_Resp is Name_Req\", function () {\r",
							"    pm.expect(resp_data.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Age_Resp is Age_Req\", function () {\r",
							"    pm.expect(resp_data.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Salary_Resp is Salary_Req\", function () {\r",
							"    pm.expect(+resp_data.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log (resp_data.family);\r",
							"console.log (resp_data.pets);\r",
							"console.log (resp_data.family.pets.dog);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check dog's name\", function () {\r",
							"    pm.expect(resp_data.family.pets.dog.name).exist;\r",
							"});\r",
							"\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check dog's age\", function () {\r",
							"    pm.expect(resp_data.family.pets.dog.age).exist;\r",
							"});\r",
							"\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check dog name is Luky\", function () {\r",
							"    pm.expect(resp_data.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check dog age is 4\", function () {\r",
							"    pm.expect(resp_data.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Maryna&age=30&salary=500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Maryna"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"//3. Спарсить response body в json\r",
							"var resp_data = pm.response.json();\r",
							"\r",
							"\r",
							"//4. Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name_resp is Name_req\", function () {\r",
							"    pm.expect(resp_data.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age_resp is Age_req\", function () {\r",
							"    pm.expect(+resp_data.age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log (req.salary);\r",
							"\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log (resp_data.salary);\r",
							"\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log (resp_data.salary[0]);\r",
							"\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log (resp_data.salary[1]);\r",
							"\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log (resp_data.salary[2]);\r",
							"\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Resp_Salary_0 is req_Salary\", function () {\r",
							"    pm.expect(+resp_data.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Resp_Salary*2 is req_Salary\", function () {\r",
							"    pm.expect(+resp_data.salary[1]).to.eql(+req.salary*2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Resp_Salary*3 is req_Salary\", function () {\r",
							"    pm.expect(+resp_data.salary[2]).to.eql(+req.salary*3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"var resp_data = pm.response.json();\r",
							"pm.environment.set(\"name\", resp_data.name);\r",
							"\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"var resp_data = pm.response.json();\r",
							"pm.environment.set(\"age\", resp_data.age);\r",
							"\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"var resp_data = pm.response.json();\r",
							"pm.environment.set(\"salary\", req.salary);\r",
							"\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var json_resp = JSON.parse(responseBody);\r",
							"var salary = json_resp.salary\r",
							"\r",
							"\r",
							"for (var i=0; i < salary.length; i++){\r",
							"    console.log(\"Salary_\" + i + \": \" +salary[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Maryna&age=30&salary=500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Maryna"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"var resp_data = pm.response.json();\r",
							"\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var req_data = request.data;\r",
							"\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Start_QA_salary exist\", function () {\r",
							"\tpm.expect(resp_data.start_qa_salary).exist;\r",
							"});\r",
							"\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months exist\", function () {\r",
							"\tpm.expect(resp_data.qa_salary_after_6_months).exist;\r",
							"});\r",
							"\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months exist\", function () {\r",
							"\tpm.expect(resp_data.qa_salary_after_12_months).exist;\r",
							"});\r",
							"\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"QA_salary_after_1.5_year exists\", function () {\r",
							"    pm.expect(resp_data).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"QA_salary_after_3.5_years exists\", function () {\r",
							"    pm.expect(resp_data).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Person exist\", function () {\r",
							"\tpm.expect(resp_data.person).exist;\r",
							"});\r",
							"\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary равен salary из request\", function () {\r",
							"    pm.expect(resp_data.start_qa_salary).to.eql(+(req_data.salary));\r",
							"});\r",
							"\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months равен salary*2 из request\", function () {\r",
							"    pm.expect(resp_data.qa_salary_after_6_months).to.eql(+(req_data.salary*2));\r",
							"});\r",
							"\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months равен salary*2.7 из request\", function () {\r",
							"    pm.expect(resp_data.qa_salary_after_12_months).to.eql(+(req_data.salary*2.7));\r",
							"});\r",
							"\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year равен salary*3.3 из request\", function () {\r",
							"    pm.expect(resp_data['qa_salary_after_1.5_year']).to.eql(+(req_data.salary*3.3));\r",
							"});\r",
							"\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years равен salary*3.8 из request\", function () {\r",
							"    pm.expect(resp_data['qa_salary_after_3.5_years']).to.eql(+(req_data.salary*3.8));\r",
							"});\r",
							"\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"В параметре person, 1-й элемент из u_name равен salary из request\", function () {\r",
							"    pm.expect(resp_data.person.u_name[1]).to.eql(+req_data.salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age равен age из request\", function () {\r",
							"    pm.expect(resp_data.person.u_age).to.eql(+(req_data.age));\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years равен salary*4.2 из request\", function () {\r",
							"    pm.expect(resp_data.person.u_salary_5_years).to.eql(+(req_data.salary*4.2));\r",
							"});\r",
							"\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let key in resp_data.person) {\r",
							"console.log(\"resp_data.person \" + key + \" = \" + resp_data.person[key]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}